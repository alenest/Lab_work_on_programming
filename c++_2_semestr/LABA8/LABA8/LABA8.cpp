// LABA8.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
#define  _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include "modul8.h"

void main()
{
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);
    
   /* printf("%.5lf\n", log1p(2.0));
    printf("%.5lf\n", sin(2.0));
    printf("%.5lf\n", 6.0 / 7.0);
    printf("%.5lf\n", log1p(2.0) - 0.95 * sin(2.0) + (6.0 / 7.0) - 2.0);*/
    //log1p(x) - 0.95 * sin(x) + (6.0 / 7.0) - x
    //0.95 * sin(x)
    
    printf("N - ? ");
    int N; scanf("%d",&N);
    printf("A, B - ? ");
    double A, B; scanf("%lf %lf",&A , &B);
    if (A>=B) { printf("A должно быть меньше B"); return; }
    if( A<= 0 || B >= 2) { printf("Некорректный интервал"); return; }
   
    if (N < 0 || N > 10) { printf("Некорректная погрешность"); return; }

    double(*f)(double);
    /*for (double p = 0; p < 10; p = p + 1) printf("\n%d %.15lf\n", p, f(p));
    printf("_____________________");*/
    bool flag = true;
    if ((f1(A) * f1(B)) > 0) { printf("Корня функции 25 на отрезке [A;B] нет\n"); flag = false; }
    if (flag) {
        f = f1;
        printf("  функция 25   | Метод деления отрезка пополам |    Метод простых итераций     |\n");
        printf(" №| погрешность|корень              |итераций  |корень              |итераций  |");
        printf("\n================================================================================");
        for (int i = 1; i <= N; i++)
        {
            int iterations = 0;
            printf("\n%2d|%12.*lf|", i, i, pow(10, -1 * i));
            double x = BisectionMethod(f, A, B, pow(10, -1 * i), iterations);
            printf("%20.*lf|%10d|", i, x, iterations);
            double y = SimpleIterationMethod(f, A, B, pow(10, -1 * i), iterations);
            printf("%20.*lf|%10d|", i, y, iterations);
        }
        printf("\n\n================================================================================\n\n");
    }
    if ((f2(A) * f2(B)) > 0) { printf("Корня функции 28 на отрезке [A;B] нет\n"); return; }
    f = f2;
    printf("  функция 28   | Метод деления отрезка пополам |    Метод простых итераций     |\n");
    printf(" №| погрешность|корень              |итераций  |корень              |итераций  |");
    printf("\n================================================================================");
    for (int i = 1; i <= N; i++)
    {
        int iterations = 0;
        printf("\n%2d|%12.*lf|", i, i, pow(10, -1 * i));
        double x = BisectionMethod(f, A, B, pow(10, -1 * i), iterations);
        printf("%20.*lf|%10d|", i, x, iterations);
        double y = SimpleIterationMethod(f, A, B, pow(10, -1 * i), iterations);
        printf("%20.*lf|%10d|", i, y, iterations);
    }
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
