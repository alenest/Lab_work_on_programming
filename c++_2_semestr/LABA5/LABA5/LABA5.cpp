// LABA5.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <stdio.h> // FILE fopen fclose fprintf, fscanf, printf, scanf
#include <conio.h> // getch
#include <windows.h> // SetConsoleOutputCP, SetConsoleCP

void main()
{
	SetConsoleOutputCP(1251); // смена кодировки при выводе 
	//printf("Use \"Lucida Console\"\n"); // не забудьте в свойствах консольного окна указать шрифт
	char fn[80]; // статический массив из символов – статическая строка
	printf("Имя файла =?"); // приглашение
	//gets(fn); //Ввод строки – имени текстового файла (по умолчанию путь – путь к EXE-файлу)
	scanf_s("%s/n", &fn,80);
	//fn[80] = '\0';
	//gets(fn);
	FILE* f;
	std::cout << "мы НИХУЯ ЕЩЕ НЕ СДЕЛАЛИ!";
	fopen_s(&f, fn, "rt");  // текстовый файл открыть для чтения только
	if (!f) { // или if (f ==NULL) { 
		printf("Error: Ошибка при открытии файла %s для чтения\nPress any key", fn);
		//getch(); // ожидание нажатия клавиши
		system("pause");
		return; // выход из функции main
	}
	std::cout << "мы открылись!";
	int n, * mas; // целое, динамический массив из целых – указатель на целое
	// ввод и вывод длины массива из открытого текстового файла, связанного с переменной f
	fscanf_s(f, "%d", &n); // считать десятичное целое и сохранить по адресу переменной n
	printf("n=%d\n", n); // вывод на экран сообщения “n=”, n и символа конца строки ‘\n’
	// ввод и вывод n значений одномерного динамического массива
	std::cout << "мы считали количество!"<< n<< std::endl;
	int i; // значения индекса для ввода и вывода массива
	mas = new int[n]; // выделение памяти для массива из n элементов типа int
	for (i = 0; i < n; i++)
		fscanf_s(f, "%d", &mas[i]); // ввод по-элементный массива из файла, связанного с f
	printf("mas:\n"); // вывод на экран
	for (i = 0; i < n; i++) {
		printf("%d ", mas[i]); // вывод в 10с/с элементов массива через два пробела
	}
	printf("\n"); // вывести строку из одного символа – символа конца строки
	// освобождение памяти одномерного динамического массива:
	delete[] mas;
	fclose(f); // закрытие файла
	printf("\nPress any key to exit");
	//getch(); // задержка экрана до нажатия любой клавиши
	system("pause");
	return; //выход из main()
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
