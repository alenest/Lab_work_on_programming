// LABA3_PEREDEL_KING.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <windows.h>
#include <cmath>
using namespace std;

class Triangle {  // создание класса треугольник
private:
    int* X1, * Y1, * X2, * Y2, * X3, * Y3;  // координаты 3-х точек
    double* Side1, * Side2, * Side3;  // значения сторон треугольника
public:
    Triangle() {  // конструктор класса
        // выделение памяти под все поля класса
        X1 = new int(); Y1 = new int();
        X2 = new int(); Y2 = new int();
        X3 = new int(); Y3 = new int();
        Side1 = new double();
        Side2 = new double();
        Side3 = new double();
        *X1 = *Y1 = *X2 = *Y2 = *X3 = *Y3 = *Side1 = *Side2 = *Side3 = 0;  // все значения изначально равны 0
    }

    virtual void InputValues() {  // ввод значений полей класса
        int* x1, * y1, * x2, * y2, * x3, * y3;
        double* side1, * side2, * side3;

        while (true) {
            cout << "Значения координат могут принимать целые значения от -500 до 500" << endl;  // условие ввода
            cout << "Введите координаты первой точки:" << endl;
            x1 = new int();
            while (true) {  // ввод координаты Х первой точки
                cout << "X = ";
                if (!(cin >> *x1) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                    cout << "Надо ввести целое число!" << endl; // вывести сообщение
                    cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                    while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
                }
                else
                    if (*x1 < -500 || *x1 > 500) {
                        cout << "Недопустимое значение! Введите число от -500 до 500" << endl;
                    }
                    else break;
            }

            y1 = new int();
            while (true) {  // ввод координаты Y первой точки
                cout << "Y = ";
                if (!(cin >> *y1) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                    cout << "Надо ввести целое число!" << endl; // вывести сообщение
                    cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                    while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
                }
                else
                    if (*y1 < -500 || *y1 > 500) {
                        cout << "Недопустимое значение! Введите число от -500 до 500" << endl;
                    }
                    else break;
            }
            cout << endl;

            cout << "Введите координаты второй точки:" << endl;
            x2 = new int();
            while (true) {  // ввод координаты Х второй точки
                cout << "X = ";
                if (!(cin >> *x2) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                    cout << "Надо ввести целое число!" << endl; // вывести сообщение
                    cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                    while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
                }
                else
                    if (*x2 < -500 || *x2 > 500) {
                        cout << "Недопустимое значение! Введите число от -500 до 500" << endl;
                    }
                    else break;
            }

            y2 = new int();
            while (true) {  // ввод координаты Y второй точки
                cout << "Y = ";
                if (!(cin >> *y2) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                    cout << "Надо ввести целое число!" << endl; // вывести сообщение
                    cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                    while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
                }
                else
                    if (*y2 < -500 || *y2 > 500) {
                        cout << "Недопустимое значение! Введите число от -500 до 500" << endl;
                    }
                    else break;
            }
            cout << endl;

            cout << "Введите координаты третьей точки:" << endl;
            x3 = new int();
            while (true) {  // ввод координаты Х третьей точки
                cout << "X = ";
                if (!(cin >> *x3) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                    cout << "Надо ввести целое число!" << endl; // вывести сообщение
                    cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                    while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
                }
                else
                    if (*x3 < -500 || *x3 > 500) {
                        cout << "Недопустимое значение! Введите число от -500 до 500" << endl;
                    }
                    else break;
            }

            y3 = new int();
            while (true) {  // ввод координаты Y третьей точки
                cout << "Y = ";
                if (!(cin >> *y3) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                    cout << "Надо ввести целое число!" << endl; // вывести сообщение
                    cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                    while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
                }
                else
                    if (*y3 < -500 || *y3 > 500) {
                        cout << "Недопустимое значение! Введите число от -500 до 500" << endl;
                    }
                    else break;
            }
            cout << endl;

            // расчет сторон треугольника по полученным координатам
            side1 = new double();
            *side1 = sqrt(pow(*x1 - *x2, 2) + pow(*y1 - *y2, 2));
            side2 = new double();
            *side2 = sqrt(pow(*x1 - *x3, 2) + pow(*y1 - *y3, 2));
            side3 = new double();
            *side3 = sqrt(pow(*x3 - *x2, 2) + pow(*y3 - *y2, 2));

            // если можно создать треугольник
            if (*side1 + *side2 > *side3 && *side1 + *side3 > *side2 && *side2 + *side3 > *side1) {
                *X1 = *x1; *Y1 = *y1;  // присваиваем полученные значения полям класса
                *X2 = *x2; *Y2 = *y2;
                *X3 = *x3; *Y3 = *y3;
                *Side1 = *side1;
                *Side2 = *side2;
                *Side3 = *side3;
                cout << "Треугольник построен" << endl;
                break;
            }
            else {
                // выводим ошибку
                cout << "Получившиеся стороны: " << *side1 << ", " << *side2 << ", " << *side3 << endl;
                cout << "Из данных знaчений сторон нельзя построить треугольник!\nПопробуйте еще раз\n" << endl;
            }
        }
    }

    virtual void OutputValues() {  // вывод полученных значений
        cout << "Значения сторон треугольника: " << *Side1 << ", " << *Side2 << ", " << *Side3 << endl << endl;
    }

    virtual void CalcArea() {  // расчет площади треугольника
        double p = (*Side1 + *Side2 + *Side3) / 2.;  // расчет полупериметра
        double S = sqrt(p * (p - *Side1) * (p - *Side2) * (p - *Side3));  // расчет площади треугольника по формуле Герона
        cout << "Площадь треугольника: " << S << endl << endl;
    }

    virtual void CalcPerimeter() {  // расчет периметра треугольника
        double P = *Side1 + *Side2 + *Side3;
        cout << "Периметр треугольника: " << P << endl << endl;
    }

    virtual void CalcPointCrosMer() {  // нахождение координат точки пересечения медиан
        double X, Y;
        X = (*X1 + *X2 + *X3) / 3.;  // расчет координаты Х
        Y = (*Y1 + *Y2 + *Y3) / 3.;  // расчет координаты Y
        cout << "Точка пересечения медиан имеет координаты: Х = " << X << ", Y = " << Y << endl;
    }

    ~Triangle() {  // деструктор класса
        delete[] X1; delete[] Y1;
        delete[] X2; delete[] Y2;
        delete[] X3; delete[] Y3;
        delete[] Side1;
        delete[] Side2;
        delete[] Side3;
    }
};

class Rectangle : public Triangle {  // создание дочернего класса прямоугольник
private:
    int* X1, * Y1, * X2, * Y2;  // координаты двух точек (нижней левой и правой верхней)
    double* Side1, * Side2;  // значения сторон прямоугольника
public:
    Rectangle() {  // конструктор класса
        // выделение памяти под все поля класса
        X1 = new int(); Y1 = new int();
        X2 = new int(); Y2 = new int();
        Side1 = new double();
        Side2 = new double();
        *X1 = *Y1 = *X2 = *Y2 = *Side1 = *Side2 = 0;  // все значения изначально равны 0
    }

    void InputValues() override {  // ввод значений полей класса
        int* x1, * y1, * x2, * y2;

        while (true) {
            cout << "Значения координат могут принимать целые значения от -400 до 400" << endl;  // условие ввода
            cout << "Введите координаты первой точки (нижний левый угол):" << endl;
            x1 = new int();
            while (true) {  // ввод координаты Х первой точки
                cout << "X = ";
                if (!(cin >> *x1) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                    cout << "Надо ввести целое число!" << endl; // вывести сообщение
                    cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                    while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
                }
                else
                    if (*x1 < -400 || *x1 > 400) {
                        cout << "Недопустимое значение! Введите число от -400 до 400" << endl;
                    }
                    else break;
            }

            y1 = new int();
            while (true) {  // ввод координаты Y первой точки
                cout << "Y = ";
                if (!(cin >> *y1) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                    cout << "Надо ввести целое число!" << endl; // вывести сообщение
                    cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                    while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
                }
                else
                    if (*y1 < -400 || *y1 > 400) {
                        cout << "Недопустимое значение! Введите число от -400 до 400" << endl;
                    }
                    else break;
            }
            cout << endl;

            cout << "Введите координаты второй точки (верхний правый угол):" << endl;
            x2 = new int();
            while (true) {  // ввод координаты Х второй точки
                cout << "X = ";
                if (!(cin >> *x2) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                    cout << "Надо ввести целое число!" << endl; // вывести сообщение
                    cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                    while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
                }
                else
                    if (*x2 < -400 || *x2 > 400) {
                        cout << "Недопустимое значение! Введите число от -400 до 400" << endl;
                    }
                    else break;
            }

            y2 = new int();
            while (true) {  // ввод координаты Y второй точки
                cout << "Y = ";
                if (!(cin >> *y2) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                    cout << "Надо ввести целое число!" << endl; // вывести сообщение
                    cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                    while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
                }
                else
                    if (*y2 < -400 || *y2 > 400) {
                        cout << "Недопустимое значение! Введите число от -400 до 400" << endl;
                    }
                    else break;
            }
            cout << endl;

            // если можно создать прямоугольник
            if (*x1 < *x2 && *y1 < *y2) {
                *X1 = *x1; *Y1 = *y1;  // присваиваем полученные значения полям класса
                *X2 = *x2; *Y2 = *y2;
                *Side1 = *x2 - *x1;  // расчет сторон прямоугольника по полученным координатам
                *Side2 = *y2 - *y1;
                cout << "Прямоугольник построен" << endl;
                break;
            }
            else cout << "По данным координатам нельзя построить прямоугольник!\nПопробуйте еще раз\n" << endl;  // выводим ошибку
        }
    }

    void OutputValues() override {  // вывод полученных значений
        cout << "Значения сторон прямоугольника: " << *Side1 << ", " << *Side2 << endl << endl;
    }

    void CalcArea() override {  // расчет площади прямоугольника
        double S = *Side1 * *Side2;
        cout << "Площадь прямоугольника: " << S << endl << endl;
    }

    void CalcPerimeter() override {  // расчет периметра прямоугольника
        double P = 2 * (*Side1 + *Side2);
        cout << "Периметр прямоугольника: " << P << endl << endl;
    }

    void CalcPointCrosDiag() {  // нахождение координат точки пересечения диагоналей
        double X, Y;
        X = (*X1 + *X2) / 2.;  // расчет координаты Х
        Y = (*Y1 + *Y2) / 2.;  // расчет координаты Y
        cout << "Точка пересечения диагоналей имеет координаты: Х = " << X << ", Y = " << Y << endl;
    }

    ~Rectangle() {  // деструктор класса
        delete[] X1; delete[] Y1;
        delete[] X2; delete[] Y2;
        delete[] Side1;
        delete[] Side2;
    }
};

int main()
{
    int choice;
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);
    system("color F0");  // консоль белого цвета

    // вывод задания
    cout << "Задание: Описать класс, представляющий треугольник. Предусмотреть методы для создания объектов, вычисления площади, периметра и точки пересечения медиан.\nСоздать дочерний класс, представляющий прямоугольник. Предусмотреть методы для создания объектов, вычисления площади, периметра и точки пересечения диагоналей." << endl;
    do {
        cout << "----------------------------------------------------------------" << endl;
        while (true) {  // вывод меню и ввод выбора
            cout << "Создать треугольник - 1,\nСоздать прямоугольник - 2,\nЗакончить программу - 0" << endl;
            cout << "Ваш выбор?" << endl;
            //cin >> choice; //if (cin.get() != (int)'\n') { //if (!(cin >> choice) || cin.get() != '\n') { 
            if (!(cin >> choice) || cin.get() != '\n') { // если ошибка ввода - ввели не целое число или в потоке ввода остались символы (кроме \n)
                cout << "Надо ввести целое число!\n" << endl; // вывести сообщение
                cin.clear(); // сбросить ошибку ввода, -> cin.fail() = 0 (cin.fail() = 1, т.к. в числовую переменную записываются символы)
                while (cin.get() != '\n'); // очистить поток - считать все символы, пока не считается последний (т.е. \n)
            }
            else {
                if (choice != 1 && choice != 2 && choice != 0) cout << "Введено неверное значение!\n" << endl; // если ввели некорректное целое число, то вывести ошибку
                else break;
            }
        }

        switch (choice) {
        case 1: {
            Triangle* Figure1 = new Triangle(); // создание треугольника
            Figure1->InputValues(); // ввод значений
            Figure1->OutputValues(); // вывод
            Figure1->CalcArea(); // расчет площади треугольника
            Figure1->CalcPerimeter(); // расчет периметра треугольника
            Figure1->CalcPointCrosMer(); // нахождение координат точки пересечения медиан
            break;
        }
        case 2: {
            class Rectangle* Figure2 = new class Rectangle(); // создание прямоугольника
            Figure2->InputValues(); // ввод значений
            Figure2->OutputValues(); // вывод
            Figure2->CalcArea(); // расчет площади прямоугольника
            Figure2->CalcPerimeter(); // расчет периметра прямоугольника
            Figure2->CalcPointCrosDiag(); // нахождение координат точки пересечения диагоналей
            break;
        }
        case 0: return 0; // конец программы
        }
    } while (choice != 0);

    return 0;
}


// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
